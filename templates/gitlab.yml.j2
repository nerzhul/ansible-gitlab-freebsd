production: &base
  #
  # 1. GitLab app settings
  # ==========================

  ## GitLab settings
  gitlab:
    ## Web server settings (note: host is the FQDN, do not include http://)
    host: {{ gitlab.host }}
    port: 80
    https: false

    # Uncommment this line below if your ssh host is different from HTTP/HTTPS one
    # (you'd obviously need to replace ssh.host_example.com with your own host).
    # Otherwise, ssh host will be set to the `host:` value above
    ssh_host:

    # WARNING: See config/application.rb under "Relative url support" for the list of
    # other files that need to be changed for relative url support
    # relative_url_root: /gitlab

    # Uncomment and customize if you can't use the default user to run GitLab (default: 'git')
    user: {{ gitlab.user }}

    ## Date & Time settings
    time_zone:

    ## Email settings
    # Uncomment and set to false if you need to disable email sending from GitLab (default: true)
    email_enabled:
    # Email address used in the "From" field in mails sent by GitLab
    email_from: {{ gitlab.mail }}
    email_display_name:
    email_reply_to: {{ gitlab.mail_reply_to }}

    # Email server smtp settings are in [a separate file](initializers/smtp_settings.rb.sample).

    ## User settings
    default_can_create_group:   # default: true
    username_changing_enabled:  # default: true - User can change her username/namespace
    ## Default theme
    ##   1 - Graphite
    ##   2 - Charcoal
    ##   3 - Green
    ##   4 - Gray
    ##   5 - Violet
    ##   6 - Blue
    default_theme:  # default: 2

    ## Automatic issue closing
    # If a commit message matches this regular expression, all issues referenced from the matched text will be closed.
    # This happens when the commit is pushed or merged into the default branch of a project.
    # When not specified the default issue_closing_pattern as specified below will be used.
    # Tip: you can test your closing pattern at http://rubular.com
    issue_closing_pattern:

    ## Default project features settings
    default_projects_features:
      issues:
      merge_requests:
      wiki:
      snippets:
      builds:

    ## Webhook settings
    # Number of seconds to wait for HTTP response after sending webhook HTTP POST request (default: 10)
    webhook_timeout:

    ## Repository downloads directory
    # When a user clicks e.g. 'Download zip' on a project, a temporary zip file is created in the following directory.
    # The default is 'tmp/repositories' relative to the root of the Rails app.
    repository_downloads_path:

  ## Reply by email
  # Allow users to comment on issues and merge requests by replying to notification emails.
  # For documentation on how to set this up, see http://doc.gitlab.com/ce/incoming_email/README.html
  incoming_email:
    enabled: false

    # The email address including the `%{key}` placeholder that will be replaced to reference the item being replied to.
    # The `%{key}` placeholder is added after the user part, after a `+` character, before the `@`.
    address:

    # Email account username
    # With third party providers, this is usually the full email address.
    # With self-hosted email servers, this is usually the user part of the email address.
    user:
    # Email account password
    password:

    # IMAP server host
    host:
    # IMAP server port
    port:
    # Whether the IMAP server uses SSL
    ssl:
    # Whether the IMAP server uses StartTLS
    start_tls:

    # The mailbox where incoming mail will end up. Usually "inbox".
    mailbox:

  ## Build Artifacts
  artifacts:
    enabled: true
    # The location where Build Artifacts are stored (default: shared/artifacts).
    storage_path: {{ gitlab.home }}/gitlab/shared/artifacts

  ## Git LFS
  lfs:
    enabled: {{ gitlab.lfs_enable }}
    # The location where LFS objects are stored (default: shared/lfs-objects).
    storage_path: {{ gitlab.home }}/gitlab/shared/lfs-objects

  ## GitLab Pages (EE only)
  pages:
    enabled: false
    path: {{ gitlab.home }}/gitlab/shared/pages
    host:
    port:
    https: false

  ## Elasticsearch (EE only)
  # Enable it if you are going to use elasticsearch instead of
  # regular database search
  elasticsearch:
    enabled: false
    host:
    port:

  ## Gravatar
  ## For Libravatar see: http://doc.gitlab.com/ce/customization/libravatar.html
  gravatar:
    # gravatar urls: possible placeholders: %{hash} %{size} %{email}
    plain_url:      # default: http://www.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon
    ssl_url:       # default: https://secure.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon

  ## Auxiliary jobs
  # Periodically executed jobs, to self-heal GitLab, do external synchronizations, etc.
  # Please read here for more information: https://github.com/ondrejbartas/sidekiq-cron#adding-cron-job
  cron_jobs:
    # Flag stuck CI builds as failed
    stuck_ci_builds_worker:
      cron:

    ##
    # GitLab EE only jobs:

    # Snapshot active users statistics
    historical_data_worker:
      cron:

    # Update mirrored repositories
    update_all_mirrors_worker:
      cron:

    # In addition to refreshing users when they log in,
    # periodically refresh LDAP users membership.
    # NOTE: This will only take effect if LDAP is enabled
    ldap_sync_worker:
      cron:

  #
  # 2. GitLab CI settings
  # ==========================

  gitlab_ci:
    # Default project notifications settings:
    #
    # Send emails only on broken builds (default: true)
    all_broken_builds:
    #
    # Add pusher to recipients list (default: false)
    add_pusher:

    # The location where build traces are stored (default: builds/). Relative paths are relative to Rails.root
    builds_path: {{ gitlab.home }}/gitlab-ci/builds

  #
  # 3. Auth settings
  # ==========================

  ## LDAP settings
  # You can inspect a sample of the LDAP users with login access by running:
  #   bundle exec rake gitlab:ldap:check RAILS_ENV=production
  ldap:
    enabled: {{ gitlab.ldap.enable }}
{% if gitlab.ldap.enable %}
    servers:
      main:
        label: "LDAP"
        host: {{ gitlab.ldap.host }}
        port: {{ gitlab.ldap.port }}
        uid: {{ gitlab.ldap.attr_uid }}
        base: "{{ gitlab.ldap.base }}"
        method: "{{ gitlab.ldap.method }}"
        bind_dn: "{{ gitlab.ldap.bind_dn }}"
        password: "{{ gitlab.ldap.bind_password }}"
        active_directory": {{ gitlab.ldap.is_activedirectory }}
        block_auto_created_users: {{ gitlab.ldap.block_auto_created_users }}
{% else %}
    servers: []
{% endif %}

  ## Kerberos settings
  kerberos:
    # Allow the HTTP Negotiate authentication method for Git clients
    enabled:

    # Kerberos 5 keytab file. The keytab file must be readable by the GitLab user,
    # and should be different from other keytabs in the system.
    # (default: use default keytab from Krb5 config)
    keytab:

    # The Kerberos service name to be used by GitLab.
    # (default: accept any service name in keytab file)
    service_principal_name:

    # Dedicated port: Git before 2.4 does not fall back to Basic authentication if Negotiate fails.
    # To support both Basic and Negotiate methods with older versions of Git, configure
    # nginx to proxy GitLab on an extra port (e.g. 8443) and uncomment the following lines
    # to dedicate this port to Kerberos authentication. (default: false)
    use_dedicated_port:
    port:
    https:


  ## OmniAuth settings
  omniauth:
    # Allow login via Twitter, Google, etc. using OmniAuth providers
    enabled: {{ gitlab.omniauth.enable }}

    # Uncomment this to automatically sign in with a specific omniauth provider's without
    # showing GitLab's sign-in page (default: show the GitLab sign-in page)
    auto_sign_in_with_provider:

    # CAUTION!
    # This allows users to login without having a user account first (default: false).
    # User accounts will be created automatically when authentication was successful.
    allow_single_sign_on:
    # Locks down those users until they have been cleared by the admin (default: true).
    block_auto_created_users: {{ gitlab.omniauth.block_auto_created_users }}
    # Look up new users in LDAP servers. If a match is found (same uid), automatically
    # link the omniauth identity with the LDAP account. (default: false)
    auto_link_ldap_user:


    ## Auth providers
    # Uncomment the following lines and fill in the data of the auth provider you want to use
    # If your favorite auth provider is not listed you can use others:
    # see https://github.com/gitlabhq/gitlab-public-wiki/wiki/Custom-omniauth-provider-configurations
    # The 'app_id' and 'app_secret' parameters are always passed as the first two
    # arguments, followed by optional 'args' which can be either a hash or an array.
    # Documentation for this is available at http://doc.gitlab.com/ce/integration/omniauth.html
    providers:
      # - { name: 'google_oauth2', app_id: 'YOUR APP ID',
      #     app_secret: 'YOUR APP SECRET',
      #     args: { access_type: 'offline', approval_prompt: '' } }
{% if gitlab.omniauth.twitter.app_id != False %}
      - { name: 'twitter', app_id: '{{ gitlab.omniauth.twitter.app_id }}',
          app_secret: '{{ gitlab.omniauth.twitter.app_secret }}'}
{% endif %}
{% if gitlab.omniauth.github.app_id != False %}
      - { name: 'github', app_id: '{{ gitlab.omniauth.github.app_id }}',
          app_secret: '{{ gitlab.omniauth.github.app_secret }}',
          args: { scope: 'user:email' } }
{% endif %}

  # Shared file storage settings
  shared:
    path: {{ gitlab.home }}/gitlab/shared


  #
  # 4. Advanced settings
  # ==========================

  # GitLab Satellites
  # Important: keep the satellites.path setting until GitLab 9.0 at
  # least. This setting is fed to 'rm -rf' in
  # db/migrate/20151023144219_remove_satellites.rb
  satellites:
    # Relative paths are relative to Rails.root (default: tmp/repo_satellites/)
    path: {{ gitlab.home }}/git-data/gitlab-satellites
    timeout:

  ## Backup settings
  backup:
    path: "{{ gitlab.home }}/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
    archive_permissions:  # Permissions for the resulting backup.tar file (default: 0600)
    keep_time:    # default: 0 (forever) (in seconds)
    pg_schema:    # default: nil, it means that all schemas will be backed up
    upload:
      # Fog storage connection settings, see http://fog.io/storage/ .
      connection:
      # The remote 'directory' to store your backups. For S3, this would be the bucket name.
      remote_directory:
      multipart_chunk_size:
      encryption:

  ## GitLab Shell settings
  gitlab_shell:
    path: {{ gitlab.home }}/embedded/service/gitlab-shell/

    # REPOS_PATH MUST NOT BE A SYMLINK!!!
    repos_path: {{ gitlab.home }}/git-data/repositories
    hooks_path: {{ gitlab.home }}/embedded/service/gitlab-shell/hooks/

    # Git over HTTP
    upload_pack:
    receive_pack:

    # If you use non-standard ssh port you need to specify it
    ssh_port:

    # git-annex support (EE only)
    # If this setting is set to true, the same setting in config.yml of
    # gitlab-shell needs to be set to true
    git_annex_enabled:

  ## Git settings
  # CAUTION!
  # Use the default values unless you really know what you are doing
  git:
    bin_path: /usr/local/bin/git
    # The next value is the maximum memory size grit can use
    # Given in number of bytes per git object (e.g. a commit)
    # This value can be increased if you have very large commits
    max_size:
    # Git timeout to read a commit, in seconds
    timeout:

  #
  # 5. Extra customization
  # ==========================

  extra:


    rack_attack:
      git_basic_auth:


